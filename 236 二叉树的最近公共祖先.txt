题目描述：
    给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。
    百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，
    最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。
https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree

//递归
class Solution{
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q){
        if(!root||root==p||root==q)
            return root;
        TreeNode* left=lowestCommonAncestor(root->left,p,q);
        TreeNode* right=lowestCommonAncestor(root->right,p,q);
        if(!left)
            return right;
        if(!right)
            return left;
        return root;
    }
};

//哈希表――存储父节点
class Solution{
public:
    unordered_map<TreeNode*,TreeNode*> father_map;
    unordered_map<TreeNode*,bool> parents;

    //father_map存储父节点
    void dfs(TreeNode* root){
        if(root->left!=nullptr){
            father_map[root->left]=root;
            dfs(root->left);
        }
        if(root->right!=nullptr){
            father_map[root->right]=root;
            dfs(root->right);
        }
    }

    TreeNode* lowestCommonAncestor(TreeNode* root,TreeNode* p,TreeNode* q){
        dfs(root);
        father_map[root]=nullptr;
        //parents记录p的所有祖先结点
        while(p!=nullptr){
            parents[p]=true;
            p=father_map[p];
        }
        //从q开始依次向前遍历q的祖先节点
        while(q!=nullptr){
            if(parents[q])
                return q;
            q=father_map[q];
        }
        return nullptr;
    }
};