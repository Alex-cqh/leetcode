题目描述：
    将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。
https://leetcode-cn.com/problems/merge-two-sorted-lists/

//初始解法  暴力解法
时间复杂度O(m+n)  空间复杂度O(1)
备注：
    A.B则A为对象或者结构体； 点号（.）：左边必须为实体。
    A->B则A为指针，->是成员提取，A->B是提取A中的成员B，A只能是指向类、结构、联合的指针； 箭头（->）：左边必须为指针；

    class/struct A{}
    A b;
    A *p = &b;
    b.a; //类类型的对象访问类的成员
    p->a; //类类型的指针访问类的成员

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode dummy=ListNode(-1);//实体对象
        ListNode *prev=&dummy;//指针指向哑结点所存放内存

        while(l1!=nullptr&&l2!=nullptr){
            if(l1->val>l2->val){
                prev->next=l2;
                l2=l2->next;
            }else{
                prev->next=l1;
                l1=l1->next;
            }
            prev=prev->next;
        }
        prev->next= (l1==nullptr)? l2:l1;
        return dummy.next;
    }
};


//递归解法
时间复杂度O(m+n)  空间复杂度O(m+n)
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==nullptr)
            return l2;
        if(l2==nullptr)
            return l1;
        //可以使用哑结点(思考一下)
        if(l1->val<l2->val){
            l1->next=mergeTwoLists(l1->next,l2);
            return l1;
        }else{
            l2->next=mergeTwoLists(l1,l2->next);
            return l2;
        }  
    }
};

//迭代
(和暴力解法实质一样，只不过暴力解建立了一个结构体，这里创建了一个结点)
时间复杂度O(m+n)  空间复杂度O(1)
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode *preHead = new ListNode(-1);
        ListNode *prev=preHead;
        while(l1!=nullptr&&l2!=nullptr){
            if(l1->val>l2->val){
                prev->next=l2;
                l2=l2->next;
            }else{
                prev->next=l1;
                l1=l1->next;
            }
            prev=prev->next;
        }
        prev->next= (l2==nullptr)? l1:l2;
        return preHead->next;
    }
};