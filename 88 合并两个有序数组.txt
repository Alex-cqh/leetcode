题目描述：
    给你两个按 非递减顺序 排列的整数数组?nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。
    请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。
    注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，
    其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。
https://leetcode-cn.com/problems/merge-sorted-array/

//初始解法  利用辅助数组
时间复杂度O(m+n)  空间复杂度O(m+n)

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i,j;
        vector<int> nums;
        for(i=0,j=0;i<m&&j<n;){
            if(nums1[i]<nums2[j]){
                nums.push_back(nums1[i]);
                i++;
            }else{
                nums.push_back(nums2[j]);
                j++;
            }
        }
        while(i<m){
            nums.push_back(nums1[i]);
            i++;
        }
        while(j<n){
            nums.push_back(nums2[j]);
            j++;
        }
        for(i=0;i<m+n;i++){
            nums1[i]=nums[i];
        }
    }
};


//优化解法――逆向双指针
//时间复杂度O(m+n)  空间复杂度O(1)

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        while(m>0&&n>0){
            if(nums1[m-1]<nums2[n-1]){
                nums1[m+n-1]=nums2[n-1];
                n--;
            }else{
                nums1[m+n-1]=nums1[m-1];
                m--;
            }
        }
        while(n>0){
            nums1[m+n-1]=nums2[n-1];
            n--;
        }
    }
};
